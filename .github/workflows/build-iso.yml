---
name: Build ISOs

on:
  workflow_dispatch:
    inputs:
      upload-to-cloudflare:
        description: "Upload to Cloudflare"
        required: false
        default: false
        type: boolean
  pull_request:
    branches:
      - main
    paths:
      - './iso.toml'
      - './.github/workflows/build-iso.yml'
      - './Justfile'

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  IMAGE_NAME: "bluefin"
  DEFAULT_TAG: "lts"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ISOs
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64, amd64]
        flavor: ["", "hwe", "gdx"]
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Maximize build space
        if: matrix.platform != 'arm64'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2

      - name: Patch ISO configuration to fit flavor
        env:
          FLAVOR: ${{ matrix.flavor }}
        run: |
          set -x
          if [ "${FLAVOR}" != "" ] ; then
            IMAGE_NAME="${IMAGE_NAME}-${FLAVOR}"
            export IMAGE_NAME
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
            sed -i "s/bluefin\:lts/bluefin-$FLAVOR\:lts/g" ./iso.toml
          fi

      - name: Build ISO
        id: build
        uses: bootc-warehouse/bootc-image-builder-action@main
        with:
          config-file: ./iso.toml
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}

      - name: Patch ISO with our branding
        env:
          ANACONDA_ISO_OUTPUT_PATH: ${{ steps.build.outputs.anaconda-iso-output-path }}
        run: just patch-iso-branding 1 ${ANACONDA_ISO_OUTPUT_PATH}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.anaconda-iso-output-path }}
          OUTPUT_DIRECTORY: ${{ steps.build.outputs.output-directory }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          PLATFORM: ${{ matrix.platform }}
          DEFAULT_TAG: ${{ env.DEFAULT_TAG }}
          FLAVOR: ${{ matrix.flavor }}
        run: |
          ISO_PATH=""
          if [ $PLATFORM == "amd64" ]; then
            ISO_PATH="${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}.iso"
            mv "${OUTPUT_PATH}" "${ISO_PATH}"
          else
            ISO_PATH="${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}-${PLATFORM}.iso"
            mv "${OUTPUT_PATH}" "${ISO_PATH}"
          fi
          echo "ISO_PATH=${ISO_PATH}" >> $GITHUB_OUTPUT

      # While the bootc-image-builder-action does generate checksums for the artifacts,
      # the subsequent branding steps alter the files and therefore the checksums
      - name: Generate Checksum
        id: checksum
        env:
          ISO_PATH: ${{ steps.rename.outputs.ISO_PATH }}
          OUTPUT_DIRECTORY: ${{ steps.build.outputs.output-directory }}
        working-directory: ${{ steps.build.outputs.output-directory }}
        run: |
          sha256sum $(basename $ISO_PATH) > $ISO_PATH-CHECKSUM
          CHECKSUM_PATH=$(readlink -f $ISO_PATH-CHECKSUM)
          echo "CHECKSUM_PATH=${CHECKSUM_PATH}" >> $GITHUB_OUTPUT

      - name: Validate ISO against checksum
        env:
          ISO_PATH: ${{ steps.rename.outputs.ISO_PATH }}
          CHECKSUM_PATH: ${{ steps.checksum.outputs.CHECKSUM_PATH }}
        working-directory: ${{ steps.build.outputs.output-directory }}
        run: |
          sha256sum -c $CHECKSUM_PATH

      - name: Upload to Job Artifacts
        if: inputs.upload-to-cloudflare == false || github.event_name == 'pull_request'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ env.DEFAULT_TAG }}-${{ matrix.platform }}-iso
          if-no-files-found: error
          path: ${{ steps.build.outputs.output-directory }}

      - name: Upload to CloudFlare
        if: inputs.upload-to-cloudflare == true && github.event_name != 'pull_request'
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ steps.build.outputs.output-directory }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_DIR R2:bluefin
